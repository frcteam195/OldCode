#pragma config(Motor,  port2,           leftMotor,     tmotorVex393_MC29, openLoop, driveLeft)
#pragma config(Motor,  port3,           rightMotor,    tmotorVex393_MC29, openLoop, reversed, driveRight)
#pragma config(Motor,  port4,           liftMotorTopLeft, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           liftMotorTopRight, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           liftMotorBottomLeft, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           liftMotorBottomRight, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           clawMotor,     tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//####################################################################################################//
//____________________________________________LEGEND__________________________________________________//
//                                                                                                    //
//90 ticks per revolution of wheel                                                                    //
//vexRT[Ch1] = Right Joystick X Axis                                                                  //
//vexRT[Ch2] = Left Joystick X Axis                                                                   //
//vexRT[Ch3] = Left Joystick Y Axis                                                                   //
//vexRT[Ch4] = Right Joystick Y Axis                                                                  //
//####################################################################################################//



//Competition Platform
#pragma platform(VEX)


//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)


//Include DO NOT TOUCH
#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

//****************************************************************************************************//
//____________________________________Voids And Intergers_____________________________________________//
//     																																																//
//****************************************************************************************************//
//Andrew Customized Drive
void customDrive()
{
	motor[leftMotor] = (-vexRT[Ch3] + vexRT[Ch1]);
	motor[rightMotor] = (-vexRT[Ch3] + -vexRT[Ch1]);

}
//Andrew Customized lowSpeed Drive
void lowspeedCustomDrive()
{
	motor[leftMotor] = (-vexRT[Ch3] + vexRT[Ch1]) / 3;
	motor[rightMotor] = (-vexRT[Ch3] + -vexRT[Ch1]) / 3;

}
//Arcade Drive
void arcadeDrive()
{
	motor[leftMotor] = -vexRT[Ch3] + vexRT[Ch4];
	motor[rightMotor] = -vexRT[Ch3] - vexRT[Ch4];
}

//Tank Drive
void tankDrive()
{
	motor[leftMotor] = -vexRT[Ch3];
	motor[rightMotor] = -vexRT[Ch1];
}

//Required For Competition !!!DO NOT TOUCH!!!
void pre_auton()
{
	bStopTasksBetweenModes = true;
}


//****************************************************************************************************//
//________________________________________MAIN CODE___________________________________________________//
//     																																																//
//****************************************************************************************************//

/*-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-Autonomous_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_*/
task autonomous()
{
	AutonomousCodePlaceholderForTesting();  // Remove this function call once you have "real" code.
}
/*-_-_-_-_-_-_-_-_-_-_-_-_-_-_-User Control (VEX Controller)_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-*/
task usercontrol()
{
	while(true)
	{
//If Button 8U Is Pressed, Robot Drives At Low Speed

		if(vexRT[Btn8U] == 0)
			{
				customDrive();
			}
			else
			{
				lowspeedCustomDrive();
			}

//If Button 6U Is Pressed, Lift Goes Up; If Not, Lift Stays At Current Position
		if(vexRT[Btn6U] == 1)
		{
//Top
			motor[liftMotorTopLeft] = 127;
			motor[liftMotorTopRight] = 127;
//Bottom
			motor[liftMotorBottomLeft] = 127;
			motor[liftMotorBottomRight] = 127;
		}
		else
		{
//Top
			motor[liftMotorTopLeft] = 0;
			motor[liftMotorTopRight] = 0;
//Bottom
			motor[liftMotorBottomLeft] = 0;
			motor[liftMotorBottomRight] = 0;
		}
//If Button 5U Is Pressed, Lift Goes Down; If Not, Lift Stays At Current Position
		if(vexRT[Btn5U] == 1)
		{
//Top
			motor[liftMotorTopLeft] = -127;
			motor[liftMotorTopRight] = -127;
//Bottom
			motor[liftMotorBottomLeft] = -127;
			motor[liftMotorBottomRight] = -127;
		}
		else
		{
//Top
			motor[liftMotorTopLeft] = 0;
			motor[liftMotorTopRight] = 0;
//Bottom
			motor[liftMotorBottomLeft] = 0;
			motor[liftMotorBottomRight] = 0;
		}
//If Button 6D Is Pressed, Claw Opens; If Not, Claw Stays At Current Position
		if(vexRT[Btn6D] == 1)
		{
			motor[clawMotor] = 127;
		}
		else
		{
			motor[clawMotor] = 0;
		}
//If Button 5D Is Pressed, Claw Closes; If Not, Claw Stays At Current Position
		if(vexRT[Btn6U] == 1)
		{
			motor[clawMotor] = -127;
		}
		else
		{
			motor[clawMotor] = 0;
		}
	}
}
